// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Prediction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Prediction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Prediction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Prediction", id.toString(), this);
  }

  static load(id: string): Prediction | null {
    return store.get("Prediction", id) as Prediction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get predictor(): Bytes {
    let value = this.get("predictor");
    return value.toBytes();
  }

  set predictor(value: Bytes) {
    this.set("predictor", Value.fromBytes(value));
  }

  get prediction(): Bytes {
    let value = this.get("prediction");
    return value.toBytes();
  }

  set prediction(value: Bytes) {
    this.set("prediction", Value.fromBytes(value));
  }

  get stake(): BigInt {
    let value = this.get("stake");
    return value.toBigInt();
  }

  set stake(value: BigInt) {
    this.set("stake", Value.fromBigInt(value));
  }
}

export class Lend extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Lend entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Lend entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Lend", id.toString(), this);
  }

  static load(id: string): Lend | null {
    return store.get("Lend", id) as Lend | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Market entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Market entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Market", id.toString(), this);
  }

  static load(id: string): Market | null {
    return store.get("Market", id) as Market | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolveTime(): BigInt {
    let value = this.get("resolveTime");
    return value.toBigInt();
  }

  set resolveTime(value: BigInt) {
    this.set("resolveTime", Value.fromBigInt(value));
  }

  get isResolved(): boolean {
    let value = this.get("isResolved");
    return value.toBoolean();
  }

  set isResolved(value: boolean) {
    this.set("isResolved", Value.fromBoolean(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(value as Bytes));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get question(): string | null {
    let value = this.get("question");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set question(value: string | null) {
    if (value === null) {
      this.unset("question");
    } else {
      this.set("question", Value.fromString(value as string));
    }
  }

  get startTime(): BigInt | null {
    let value = this.get("startTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt | null) {
    if (value === null) {
      this.unset("startTime");
    } else {
      this.set("startTime", Value.fromBigInt(value as BigInt));
    }
  }

  get closeTime(): BigInt | null {
    let value = this.get("closeTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closeTime(value: BigInt | null) {
    if (value === null) {
      this.unset("closeTime");
    } else {
      this.set("closeTime", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get position(): Bytes | null {
    let value = this.get("position");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set position(value: Bytes | null) {
    if (value === null) {
      this.unset("position");
    } else {
      this.set("position", Value.fromBytes(value as Bytes));
    }
  }
}

export class Predictor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Predictor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Predictor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Predictor", id.toString(), this);
  }

  static load(id: string): Predictor | null {
    return store.get("Predictor", id) as Predictor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get activeStake(): BigInt {
    let value = this.get("activeStake");
    return value.toBigInt();
  }

  set activeStake(value: BigInt) {
    this.set("activeStake", Value.fromBigInt(value));
  }

  get marketID(): Bytes | null {
    let value = this.get("marketID");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set marketID(value: Bytes | null) {
    if (value === null) {
      this.unset("marketID");
    } else {
      this.set("marketID", Value.fromBytes(value as Bytes));
    }
  }
}
