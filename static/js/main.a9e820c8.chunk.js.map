{"version":3,"sources":["components/Utils/History.js","components/Utils/AlertModal.js","components/Utils/SuccessModal.js","components/Utils/Loading.js","components/ViewMarket/index.js","components/ListMarket/index.js","components/App.js","index.js"],"names":["createHistory","require","createBrowserHistory","AlertModal","open","toggle","children","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","SuccessModal","onConfirm","Loading","className","style","height","type","color","width","ViewMarket","useState","msg","errorModal","setErrorModal","successModal","setSuccessModal","prediction","amount","details","setDetails","loading","setLoading","isProcessing","setIsProcessing","isApproving","setIsApproving","isLending","setIsLending","isResolving","setIsResolving","isMakingPrediction","setIsMakingPrediction","showMakePrediction","setShowMakePrediction","provider","setProvider","contractInstance","setContractInstance","pmContractAddress","useParams","totalAmountStaked","question","resultApi","predictionCloseTimestamp","marketCloseTimestamp","isLessRisky","outcomes","predictionResult","isMarketResolved","isAlreadyWithdrawn","rewardAmount","isStakedOnAave","isConditionalMarket","chainlinkResult","state","setState","addressPredictions","getMarketData","a","web3","window","ethereum","enable","currentProvider","ethers","providers","Web3Provider","signer","getSigner","getAddress","signerAddress","contract","Contract","pmAbi","optionsCount","outcomeCount","i","options","uniquePredictionValue","Number","predictionValue","push","outcome","getFormattedPrediction","amountStaked","utils","formatEther","addressPrediction","addressStake","stakeAmount","currentUnixTime","getConditionalMarketResult","getRewardAmount","approveDai","erc20","erc20Abi","approve","tx","waitForTransaction","hash","makePrediction","parseEther","toString","message","lendOnAave","resolveMarket","getReward","withdrawReward","Math","floor","Date","getTime","getISOString","unixTimestamp","tempTime","toISOString","replace","index","indexOf","substring","useEffect","marginBottom","Card","textAlign","fontWeight","fontSize","Row","paddingBottom","Col","href","target","rel","paddingTop","marginTop","Table","striped","bordered","hover","map","element","k","key","toFixed","size","DropdownButton","title","onSelect","event","Dropdown","Item","eventKey","Form","Control","placeholder","onChange","e","value","required","backgroundColor","history","go","ListMarket","markets","setMarkets","contractAddresses","getAllMarkets","allMarkets","length","abi","contractAddress","textDecoration","to","getTimeInString","App","routes","basename","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9e820c8.chunk.js","sourcesContent":["const createHistory = require(\"history\").createBrowserHistory;\n\nexport default createHistory();\n","import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function AlertModal({\n    open,\n    toggle,\n    children,\n}) {\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Opps!! Error...</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\"\n                    onClick={toggle}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function SuccessModal({\n    open,\n    toggle,\n    children,\n    onConfirm,\n}) {\n    const handleClick = () => {\n        toggle();\n        onConfirm();\n    };\n\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Notification</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\"\n                    onClick={handleClick}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React from \"react\";\n\nimport ReactLoading from \"react-loading\";\n\nexport default function Loading() {\n    return (\n        <div\n            className=\"d-flex justify-content-center mt-5 g-pt-90\"\n            style={{ height: \"-webkit-fill-available\"}}\n        >\n            <ReactLoading\n                type={\"spin\"}\n                color={\"#343a40\"}\n                height={\"8%\"}\n                width={\"8%\"}\n            />\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n    Row,\n    Button,\n    Card,\n    Col,\n    Form,\n    Table,\n    Dropdown, DropdownButton\n} from \"react-bootstrap\";\n\nimport { ethers } from 'ethers';\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport Loading from \"../Utils/Loading\";\nimport pmAbi from \"../../utils/pmAbi.json\";\nimport erc20Abi from \"../../utils/erc20Abi.json\";\nimport { useParams } from \"react-router-dom\";\nimport history from \"../Utils/History\";\n\nexport default function ViewMarket() {\n    let routes;\n\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const [details, setDetails] = useState({\n        prediction: \"\",\n        amount: \"\",\n    });\n\n    const [loading, setLoading] = useState(true);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [isApproving, setIsApproving] = useState(false);\n    const [isLending, setIsLending] = useState(false);\n    const [isResolving, setIsResolving] = useState(false);\n    const [isMakingPrediction, setIsMakingPrediction] = useState(false);\n    const [showMakePrediction, setShowMakePrediction] = useState(false);\n    const [provider, setProvider] = useState(\"\");\n    const [contractInstance, setContractInstance] = useState(\"\");\n    const { pmContractAddress } = useParams();\n    const daiContractAddress = \"0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD\";\n\n    const [state, setState] = useState({\n        totalAmountStaked: \"\",\n        question: \"\",\n        resultApi: \"\",\n        predictionCloseTimestamp: \"\",\n        marketCloseTimestamp: \"\",\n        isLessRisky: false,\n        outcomes: [],\n        predictionResult: \"\",\n        isMarketResolved: false,\n        isAlreadyWithdrawn: false,\n        rewardAmount: \"\",\n        isStakedOnAave: false,\n        isConditionalMarket: false,\n        chainlinkResult: \"\",\n    });\n\n    const [addressPredictions] = useState([]);\n\n    const getMarketData = async () => {\n        const web3 = window.ethereum;\n        await web3.enable();\n        const currentProvider = new ethers.providers.Web3Provider(web3);\n        const signer = currentProvider.getSigner();\n        const signerAddress = await signer.getAddress();\n\n        const contract = new ethers.Contract(\n            pmContractAddress,\n            pmAbi,\n            signer,\n        );\n\n        setProvider(currentProvider);\n        setContractInstance(contract);\n\n        const question = await contract.question();\n        const resultApi = await contract.resultApi();\n        const isLessRisky = await contract.isLessRisky();\n        const optionsCount = await contract.optionsCount();\n        const totalAmountStaked = await contract.totalAmountStaked();\n        const marketCloseTimestamp = await contract.marketCloseTimestamp();\n        const predictionCloseTimestamp = await contract.predictionCloseTimestamp();\n        const isConditionalMarket = await contract.isConditionalMarket();\n\n        let outcomes = [];\n        const outcomeCount = isConditionalMarket ? 2 : optionsCount;\n        for (let i = 0; i < outcomeCount; i++) {\n            const prediction = await contract.options(i);\n            const predictionValue = await contract.uniquePredictionValue(Number(prediction));\n\n            outcomes.push({\n                outcome: getFormattedPrediction(isConditionalMarket, prediction),\n                amountStaked: ethers.utils.formatEther(predictionValue),\n            });\n        }\n\n        let addressStake;\n        const addressPrediction = await contract.prediction(signerAddress);\n        if (Number(addressPrediction) >= 0) {\n            addressStake = ethers.utils.formatEther(\n                await contract.amountStaked(signer.getAddress())\n            );\n        }\n\n        addressPredictions.push({\n            prediction: getFormattedPrediction(isConditionalMarket, addressPrediction),\n            stakeAmount: addressStake,\n        });\n\n        let predictionResult, chainlinkResult, isMarketResolved, isAlreadyWithdrawn, rewardAmount;\n        if (currentUnixTime() > Number(marketCloseTimestamp)) {\n            chainlinkResult = await contract.predictionResult();\n            isMarketResolved = await contract.isMarketResolved();\n\n            if (!isConditionalMarket) {\n                predictionResult = Number(chainlinkResult);\n            } else if (isMarketResolved) {\n                predictionResult = await contract.getConditionalMarketResult();\n                predictionResult = predictionResult ? \"Yes\" : \"No\";\n            }\n\n            isAlreadyWithdrawn = await contract.isAlreadyWithdrawn(signerAddress);\n\n            if (isMarketResolved) {\n                rewardAmount = ethers.utils.formatEther(\n                    await contract.getRewardAmount(signerAddress)\n                );\n            }\n        }\n\n        let isStakedOnAave;\n        if (currentUnixTime() > Number(predictionCloseTimestamp)) {\n            isStakedOnAave = await contract.isStakedOnAave();\n        }\n\n        setState({\n            ...state,\n            question,\n            isLessRisky,\n            outcomes,\n            totalAmountStaked: ethers.utils.formatEther(totalAmountStaked),\n            marketCloseTimestamp: Number(marketCloseTimestamp),\n            predictionCloseTimestamp: Number(predictionCloseTimestamp),\n            predictionResult,\n            isMarketResolved,\n            isAlreadyWithdrawn,\n            rewardAmount,\n            isStakedOnAave,\n            resultApi,\n            isConditionalMarket,\n            chainlinkResult,\n        });\n\n        setLoading(false);\n    }\n\n    const approveDai = async (amount) => {\n        try {\n            const erc20 = new ethers.Contract(\n                daiContractAddress,\n                erc20Abi,\n                provider.getSigner(),\n            );\n\n            setIsApproving(true);\n\n            const tx = await erc20.approve(pmContractAddress, amount);\n\n            await provider.waitForTransaction(tx.hash);\n\n            setIsApproving(false);\n        } catch {\n            setIsApproving(false);\n        }\n    }\n\n    const makePrediction = async () => {\n        try {\n            const amount = Number(\n                ethers.utils.parseEther(details.amount)\n            ).toString(10);\n\n            // Approve DAI\n            await approveDai(amount);\n\n            setIsMakingPrediction(true);\n\n            let prediction;\n            if (state.isConditionalMarket) {\n                if (details.prediction === \"Yes\") {\n                    prediction = 100;\n                } else if (details.prediction === \"No\") {\n                    prediction = 1;\n                }\n            } else {\n                prediction = details.prediction;\n            }\n\n            const tx = await contractInstance.makePrediction(\n                prediction,\n                amount,\n            );\n\n            await provider.waitForTransaction(tx.hash);\n\n            setIsMakingPrediction(false);\n\n            setSuccessModal({\n                open: true,\n                msg: \"Congratulations !! \" +\n                    \"You have successfully made your prediction !!\",\n            });\n        } catch (error) {\n            setIsMakingPrediction(false);\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const getFormattedPrediction = (isConditionalMarket, prediction) => {\n        let outcome;\n\n        if (isConditionalMarket) {\n            if (Number(prediction) === 100) {\n                outcome = \"Yes\";\n            } else if (Number(prediction) === 1) {\n                outcome = \"No\";\n            }\n        } else {\n            outcome = Number(prediction);\n        }\n\n        return outcome;\n    }\n\n    const lendOnAave = async () => {\n        try {\n            const tx = await contractInstance.lendOnAave();\n\n            setIsLending(true);\n            await provider.waitForTransaction(tx.hash);\n\n            setIsLending(false);\n\n            setSuccessModal({\n                open: true,\n                msg: \"Succesfully deposited Staked DAI to Aave !!\",\n            });\n        } catch (error) {\n            setIsLending(false);\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const resolveMarket = async () => {\n        try {\n            const tx = await contractInstance.resolveMarket();\n\n            setIsResolving(true);\n            await provider.waitForTransaction(tx.hash);\n\n            setIsResolving(false);\n\n            setSuccessModal({\n                open: true,\n                msg: \"Congratulations !! \" +\n                    \"You successfully resolved the Market !!\",\n            });\n        } catch (error) {\n            setIsResolving(false);\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const getReward = async () => {\n        try {\n            setIsProcessing(true);\n\n            const tx = await contractInstance.withdrawReward();\n\n            await provider.waitForTransaction(tx.hash);\n\n            setIsProcessing(false);\n\n            setSuccessModal({\n                open: true,\n                msg: \"Congratulations !! \" +\n                    \"Your have successfully recieved your reward !!\",\n            });\n        } catch (error) {\n            setIsProcessing(false);\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const currentUnixTime = () => {\n        return Math.floor((new Date()).getTime() / 1000);\n    }\n\n    const getISOString = (unixTimestamp) => {\n        const tempTime = new Date(unixTimestamp * 1000)\n            .toISOString()\n            .replace('Z', ' ')\n            .replace('T', ' ');\n\n        const index = tempTime.indexOf('.');\n\n        return tempTime.substring(0, index) + ' UTC';\n    }\n\n    const handleReload = () => {\n        history.go(0);\n    }\n\n    useEffect(() => {\n        if (state.totalAmountStaked === \"\") {\n            getMarketData();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (loading) {\n        routes = <Loading />;\n    } else {\n        routes = (\n            <div style={{ width: \"100%\", marginBottom: \"70px\" }}>\n                <Card className=\"mx-auto form-card \">\n                    <Card.Body style={{ textAlign: \"left\" }}>\n                        <p style={{\n                            textAlign: \"center\",\n                            fontWeight: \"bold\",\n                            fontSize: \"1.5rem\",\n                            marginBottom: \"30px\"\n                        }}>\n                            <u>{state.question}</u>\n                        </p>\n\n                        <Row style={{ paddingBottom: \"20px\" }}>\n                            <Col>\n                                <u style={{ fontWeight: \"bold\" }}>Prediction Close</u>\n                                <span className=\"float-right\">\n                                    {getISOString(state.predictionCloseTimestamp)}\n                                </span>\n                            </Col>\n\n                            <Col>\n                                <u style={{ fontWeight: \"bold\" }}>Market Close</u>\n                                <span className=\"float-right\">\n                                    {getISOString(state.marketCloseTimestamp)}\n                                </span>\n                            </Col>\n                        </Row>\n\n                        <Row style={{ paddingBottom: \"30px\" }}>\n                            <Col>\n                                <u style={{ fontWeight: \"bold\" }}>Total Staked</u>\n                                <span className=\"float-right\">{state.totalAmountStaked} DAI</span>\n                            </Col>\n\n                            <Col>\n                                <u style={{ fontWeight: \"bold\" }}>Market Type</u>\n                                <span className=\"float-right\">\n                                    {!state.isLessRisky ?\n                                        <strong>Normal Market</strong>\n                                        :\n                                        <strong>No Loss Market</strong>\n                                    }\n                                </span>\n                            </Col>\n                        </Row>\n\n                        <Row style={{ paddingBottom: \"10px\", textAlign: \"center\" }}>\n                            <Col>\n                                {currentUnixTime() > Number(state.predictionCloseTimestamp) ?\n                                    <span><strong>Result API: </strong></span>\n                                    :\n                                    null\n                                }\n                                <a href={state.resultApi} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    <span> {state.resultApi}</span>\n                                </a>\n                            </Col>\n                        </Row>\n\n                        {currentUnixTime() < Number(state.predictionCloseTimestamp) ?\n                            <div className=\"mx-auto\"\n                                style={{\n                                    width: \"84%\",\n                                    textAlign: \"center\",\n                                    color: \"red\"\n                                }}\n                            >\n                                * Only invest if you trust above API, This will be used for\n                                fetching result at the time of resolving the market.\n                                </div>\n                            : null\n                        }\n\n                        {state.isMarketResolved ?\n                            <Row style={{\n                                paddingTop: \"10px\",\n                                paddingBottom: \"10px\",\n                                textAlign: \"center\",\n                                fontWeight: \"bold\",\n                                color: \"rgb(10, 131, 103)\",\n                                fontSize: \"20px\"\n                            }}>\n                                <Col>\n                                    <span>Result: </span>\n                                    <span >{state.predictionResult}</span>\n\n                                    {state.isConditionalMarket ?\n                                        <span> ({Number(state.chainlinkResult)})</span>\n                                        :\n                                        null\n                                    }\n                                </Col>\n                            </Row>\n                            : null\n                        }\n\n                        <Row>\n                            <Col className=\"text-center\">\n                                {currentUnixTime() > Number(state.predictionCloseTimestamp) &&\n                                    !state.isStakedOnAave && !state.isMarketResolved ?\n                                    <Button\n                                        variant=\"success\"\n                                        onClick={lendOnAave}\n                                        style={{ marginTop: \"20px\" }}\n                                    >\n                                        {isLending ?\n                                            <div className=\"d-flex align-items-center\">\n                                                Depositing\n                                                <span className=\"loading ml-2\"></span>\n                                            </div>\n                                            :\n                                            <div>Deposit On Aave</div>\n                                        }\n                                    </Button>\n                                    : (currentUnixTime() > Number(state.marketCloseTimestamp) &&\n                                        !state.isMarketResolved ?\n                                        <Button\n                                            variant=\"warning\"\n                                            onClick={resolveMarket}\n                                            style={{ marginTop: \"20px\" }}\n                                        >\n                                            {isResolving ?\n                                                <div className=\"d-flex align-items-center\">\n                                                    Resolving\n                                                <span className=\"loading ml-2\"></span>\n                                                </div>\n                                                :\n                                                <div>Resolve Market</div>\n                                            }\n                                        </Button>\n                                        : null\n                                    )\n                                }\n                            </Col>\n                        </Row>\n\n                        <Table striped bordered hover style={{\n                            textAlign: \"center\",\n                            marginTop: \"20px\",\n                            marginBottom: \"30px\"\n                        }}>\n                            <thead>\n                                <tr>\n                                    <th>Outcome</th>\n                                    <th>Amount Staked</th>\n                                    <th>Win Probability</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {state.outcomes.map((element, k) => (\n                                    <tr key={k}>\n                                        <td>{element.outcome}</td>\n                                        <td>{element.amountStaked} DAI</td>\n                                        <td>{Number(state.totalAmountStaked) <= 0 ?\n                                            <div>0 %</div>\n                                            :\n                                            <div>\n                                                {(element.amountStaked / state.totalAmountStaked * 100).toFixed(2)} %\n                                            </div>\n                                        }\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n\n                        {addressPredictions[0].prediction ?\n                            <Row>\n                                <Col>\n                                    <p style={{\n                                        textAlign: \"center\",\n                                        fontWeight: \"bold\",\n                                        fontSize: \"1.2rem\",\n                                    }}>\n                                        <u>Your Position</u>\n                                    </p>\n\n                                    <div style={{\n                                        marginBottom: \"30px\",\n                                        marginTop: \"20px\",\n                                        fontSize: \"1.1 rem\",\n                                        color: \"green\"\n                                    }}>\n                                        {currentUnixTime() > Number(state.marketCloseTimestamp) &&\n                                            state.isMarketResolved ?\n                                            <div style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n                                                <span>Reward Earned:</span>\n                                                <span> {state.rewardAmount} DAI</span>\n                                            </div>\n                                            : null\n                                        }\n                                    </div>\n\n                                    <Table striped bordered hover style={{ textAlign: \"center\" }}>\n                                        <thead>\n                                            <tr>\n                                                <th>Prediction</th>\n                                                <th>Amount Staked</th>\n                                                {currentUnixTime() > Number(state.marketCloseTimestamp) &&\n                                                    state.isMarketResolved ?\n                                                    <th>Result</th>\n                                                    : null\n                                                }\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {addressPredictions.map((element, k) => (\n                                                <tr key={k}>\n                                                    <td>{element.prediction}</td>\n\n                                                    <td>{element.stakeAmount} DAI</td>\n\n                                                    {currentUnixTime() > Number(state.marketCloseTimestamp) &&\n                                                        state.isMarketResolved ?\n                                                        <td>\n                                                            {state.predictionResult == element.prediction ?\n                                                                <div>\n                                                                    <div style={{ color: \"green\" }}>You Won</div>\n                                                                    {!state.isAlreadyWithdrawn ?\n                                                                        <Button\n                                                                            onClick={getReward}\n                                                                            variant=\"outline-success\"\n                                                                            size=\"sm\"\n                                                                        >\n                                                                            {isProcessing ?\n                                                                                <div className=\"d-flex align-items-center\">\n                                                                                    Processing\n                                                                                    <span className=\"loading ml-2\"></span>\n                                                                                </div>\n                                                                                :\n                                                                                <div>Get Reward</div>\n                                                                            }\n                                                                        </Button>\n                                                                        :\n                                                                        <div>Already Withdrawn</div>\n                                                                    }\n                                                                </div>\n                                                                :\n                                                                <div>\n                                                                    <div style={{ color: \"red\" }}>You Lost</div>\n                                                                    {state.isLessRisky && !state.isAlreadyWithdrawn ?\n                                                                        <Button\n                                                                            onClick={getReward}\n                                                                            variant=\"outline-success\"\n                                                                            size=\"sm\"\n                                                                        >\n                                                                            {isProcessing ?\n                                                                                <div>\n                                                                                    Processing\n                                                                                    <span className=\"loading ml-2\"></span>\n                                                                                </div>\n                                                                                : <div>Get Stake</div>\n                                                                            }\n                                                                        </Button>\n                                                                        :\n                                                                        <div>Already Withdrawn</div>\n                                                                    }\n                                                                </div>\n                                                            }\n                                                        </td>\n                                                        : null\n                                                    }\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </Table>\n                                </Col>\n                            </Row>\n                            : null\n                        }\n\n                        {showMakePrediction ?\n                            <div>\n                                <Row>\n                                    <Col>\n                                        <p style={{\n                                            textAlign: \"center\",\n                                            fontWeight: \"bold\",\n                                            fontSize: \"1.1rem\",\n                                            marginTop: \"10px\"\n                                        }}>\n                                            <u>Create Position</u>\n                                        </p>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col style={{ textAlign: \"center\", fontWeight: \"bold\", paddingTop: \"5px\" }}>\n                                        Prediction:\n                                </Col>\n                                    <Col>\n                                        <DropdownButton\n                                            style={{\n                                                paddingBottom: \"30px\",\n                                                width: \"150px\"\n                                            }}\n                                            title={details.prediction}\n                                            variant=\"outline-info\"\n                                            onSelect={(event) => setDetails({\n                                                ...details,\n                                                prediction: event\n                                            })}\n                                        >\n                                            {state.outcomes.map((element, key) => (\n                                                <Dropdown.Item key={key} eventKey={element.outcome}>\n                                                    {element.outcome}\n                                                </Dropdown.Item>\n                                            ))}\n                                        </DropdownButton>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n                                        Stake Amount:\n                                    </Col>\n                                    <Col>\n                                        <Form.Control\n                                            className=\"mb-4\"\n                                            type=\"number\"\n                                            placeholder=\"DAI Amount (eg: 1)\"\n                                            onChange={(e) => setDetails({\n                                                ...details,\n                                                amount: e.target.value\n                                            })}\n                                            style={{ width: \"60%\" }}\n                                            value={details.amount}\n                                            required\n                                        />\n                                    </Col>\n                                </Row>\n                                <Row className=\"text-center\">\n                                    <Col>\n                                        <Button\n                                            onClick={makePrediction}\n                                            variant=\"outline-success\"\n                                        >\n                                            {isApproving ?\n                                                <div className=\"d-flex align-items-center\">\n                                                    Approving\n                                                    <span className=\"loading ml-2\"></span>\n                                                </div>\n                                                : (\n                                                    isMakingPrediction ?\n                                                        <div>\n                                                            Processing\n                                                            <span className=\"loading ml-2\"></span>\n                                                        </div>\n                                                        : <div>Submit</div>\n                                                )\n                                            }\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </div>\n                            : null\n                        }\n                    </Card.Body>\n\n                    {!showMakePrediction && currentUnixTime() < Number(state.predictionCloseTimestamp) &&\n                        Number(addressPredictions[0].stakeAmount) === 0 ?\n                        <Card.Footer className=\"text-center\" style={{ backgroundColor: '#FFFFFF50' }}>\n                            <Button\n                                onClick={setShowMakePrediction}\n                                variant=\"outline-success\"\n                            >\n                                Want to Predict ?\n                                </Button>\n                        </Card.Footer>\n                        : null\n                    }\n                </Card>\n\n                <AlertModal\n                    open={errorModal.open}\n                    toggle={() => setErrorModal({ ...errorModal, open: false })}\n                >\n                    {errorModal.msg}\n                </AlertModal>\n\n                <SuccessModal\n                    open={successModal.open}\n                    toggle={() => setSuccessModal({ ...successModal, open: false })}\n                    onConfirm={handleReload}\n                >\n                    {successModal.msg}\n                </SuccessModal>\n            </div >\n        );\n    }\n\n    return routes;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Card, Col } from \"react-bootstrap\";\nimport { ethers } from 'ethers';\nimport AlertModal from \"../Utils/AlertModal\";\nimport Loading from \"../Utils/Loading\";\nimport abi from \"../../utils/pmAbi.json\";\n\nexport default function ListMarket() {\n    let routes;\n\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const [loading, setLoading] = useState(true);\n    const [markets, setMarkets] = useState([]);\n\n    const contractAddresses = [\n        \"0x37e0B7A17F90868F747F7421A3592e32d41FA2d0\",\n        \"0x9D81492176981c6e52eAdEf69926A8Cc927Ba81C\",\n        \"0x7AfE906624a79Fb351dE6340777225bAE65f7bB6\",\n        \"0xdED5a05CccfCef9Af5D9ef70ABf21f1d17D7C107\",\n        \"0xAc5D0F82954A6468Cb1052e891DEC14910ef7DbC\",\n    ];\n\n    // const checkWeb3Connection = async () => {\n    //     const web3 = window.ethereum;\n    //     await web3.enable();\n\n    //     const provider = new ethers.providers.Web3Provider(web3);\n    //     const signer = provider.getSigner();\n    //     const networkId = 42;\n\n    //     if (networkId !== await signer.getChainId()) {\n    //         setLoading(false);\n\n    //         setErrorModal({\n    //             open: true,\n    //             msg: \"Incorrect network choosen !! Please choose correct network.\",\n    //         });\n    //     } else {\n    //         setShowMakePrediction(true);\n    //     }\n    // };\n\n    const getAllMarkets = async () => {\n        try {\n            const allMarkets = [];\n\n            const web3 = window.ethereum;\n            await web3.enable();\n            const provider = new ethers.providers.Web3Provider(web3);\n\n            if (contractAddresses.length > 0) {\n                for (let i = 0; i < contractAddresses.length; i++) {\n                    const contract = new ethers.Contract(\n                        contractAddresses[i],\n                        abi,\n                        provider,\n                    );\n\n                    const question = await contract.question();\n                    const isLessRisky = await contract.isLessRisky();\n                    const totalAmountStaked = await contract.totalAmountStaked();\n                    const marketCloseTimestamp = await contract.marketCloseTimestamp();\n\n                    allMarkets.push({\n                        contractAddress: contractAddresses[i],\n                        question,\n                        isLessRisky,\n                        totalAmountStaked: ethers.utils.formatEther(totalAmountStaked),\n                        marketCloseTimestamp,\n                    });\n\n                    if (i === contractAddresses.length - 1) {\n                        setMarkets(allMarkets);\n                        setLoading(false);\n                    }\n                }\n            } else {\n                setLoading(false);\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const currentUnixTime = () => {\n        return Math.floor((new Date()).getTime() / 1000);\n    }\n\n    const getTimeInString = (unixTimestamp) => {\n        const tempTime = new Date(unixTimestamp * 1000)\n            .toISOString()\n            .replace('Z', ' ')\n            .replace('T', ' ');\n\n        const index = tempTime.indexOf('.');\n\n        return tempTime.substring(0, index) + ' UTC';\n    }\n\n    useEffect(() => {\n        if (markets.length === 0) {\n            getAllMarkets();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (loading) {\n        routes = <Loading />;\n    } else {\n        routes = (\n            <div>\n                <p style={{\n                    marginTop: \"3%\",\n                    textAlign: \"center\",\n                    fontWeight: \"bold\",\n                    fontSize: \"1.5rem\",\n                }}>\n                    <u>Available Markets</u>\n                </p>\n\n                {markets.map((element, k) => (\n                    <Link key={k} style={{ textDecoration: \"none\" }} to={`/market/${element.contractAddress}`}>\n                        <Card className=\"mx-auto market-card\" key={k}>\n                            <Card.Body>\n                                <Row>\n                                    <Col><strong>{element.question}</strong></Col>\n                                </Row>\n                                <Row style={{ marginTop: \"20px\" }}>\n                                    <Col>\n                                        {!element.isLessRisky ?\n                                            <div>Normal Market</div>\n                                            :\n                                            <div>No Loss Market</div>\n                                        }\n                                    </Col>\n                                    <Col className=\"vertical-line\">\n                                        {element.totalAmountStaked} DAI - Total Stake\n                                </Col>\n                                    <Col className=\"vertical-line\">\n                                        {element.marketCloseTimestamp > currentUnixTime() ?\n                                            <div>\n                                                {getTimeInString(element.marketCloseTimestamp)}\n                                            </div>\n                                            :\n                                            <div>\n                                                Market Closed\n                                        </div>\n                                        }\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Card>\n                    </Link>\n                ))}\n\n                <AlertModal\n                    open={errorModal.open}\n                    toggle={() => setErrorModal({ ...errorModal, open: false })}\n                >\n                    {errorModal.msg}\n                </AlertModal>\n            </div >\n        );\n    }\n\n    return routes;\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n    HashRouter,\n    Router,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport history from './Utils/History';\nimport ViewMarket from './ViewMarket/index';\nimport ListMarket from './ListMarket/index';\n\nfunction App() {\n    const routes = (\n        <HashRouter basename='/'>\n            <Route path=\"/\" exact>\n                <ListMarket />\n            </Route>\n            <Route path=\"/market/:pmContractAddress\" exact>\n                <ViewMarket />\n            </Route>\n            <Redirect to=\"/\" />\n        </HashRouter>\n    );\n\n    return (\n        <div className=\"App\">\n            <Router history={history}>\n                {routes}\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}